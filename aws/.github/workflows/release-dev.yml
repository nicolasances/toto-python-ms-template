name: Release

on:
  push:
    branches: 
      - 'feature/**'
      - main

env:
  TF_CLOUD_ORGANIZATION: "Imatz"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_WORKSPACE: ${{ secrets.TF_WORKSPACE }}
  TF_CONFIG_DIRECTORY: "./terraform"
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  TF_VAR_container_image_tag: "\"${{ github.sha }}\""
  TF_VAR_aws_access_key: "\"${{ secrets.AWS_ACCESS_KEY_ID }}\""
  TF_VAR_aws_secret_access_key: "\"${{ secrets.AWS_SECRET_ACCESS_KEY }}\""
  TF_VAR_aws_account_id: "\"${{ secrets.aws_account_id }}\""
  TF_VAR_toto_environment: "\"dev\""
  TF_VAR_ecs_subnet_1: "\"${{ secrets.ECS_SUBNET_1 }}\""
  TF_VAR_ecs_subnet_2: "\"${{ secrets.ECS_SUBNET_2 }}\""
  TF_VAR_ecs_security_group: "\"${{ secrets.ecs_security_group }}\""
  TF_VAR_alb_listener_arn: "\"${{ secrets.alb_listener_arn }}\""
  TF_VAR_route53_zone_id: "\"${{ secrets.route53_zone_id }}\""
  TF_VAR_alb_zone_id: "\"${{ secrets.alb_zone_id }}\""
  TF_VAR_alb_dns_name: "\"${{ secrets.alb_dns_name }}\""
  TF_VAR_ecs_execution_role_arn: "\"${{ secrets.ecs_execution_role_arn }}\""
  TF_VAR_ecs_task_role_arn: "\"${{ secrets.ecs_task_role_arn }}\""
  TF_VAR_ecs_cluster_arn: "\"${{ secrets.ecs_cluster_arn }}\""
  TF_VAR_toto_vpc_id: "\"${{ secrets.toto_vpc_id }}\""
  TF_VAR_gcp_service_account_key: "\"${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}\""
  SERVICE_NAME: 'toto-py-template'
  

jobs:
  # This workflow contains a single job called "release"
  release:
    name: Build & Deploy to AWS Container Registry
    environment: dev
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: eu-west-1
    
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, push to ECR
      id: build-image
      env: 
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        ECR_REPO: ${{env.SERVICE_NAME}}-dev
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Upload Terraform Configuration
      uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      id: tf-upload
      with: 
        workspace: ${{ env.TF_WORKSPACE }}
        directory: ${{ env.TF_CONFIG_DIRECTORY }}

    - name: Create Terraform Apply Run
      uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      id: tf-apply-run
      with:
        workspace: ${{ env.TF_WORKSPACE }}
        configuration_version: ${{ steps.tf-upload.outputs.configuration_version_id }}

    - name: Terraform Apply
      uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
      if: fromJSON(steps.tf-apply-run.outputs.payload).data.attributes.actions.IsConfirmable
      id: tf-apply
      with: 
        run: ${{ steps.tf-apply-run.outputs.run_id }}
        comment: "Apply Run for build ${{ github.sha }}"